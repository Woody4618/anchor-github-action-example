name: "Verify Build"
description: "Verifies a Solana program build matches its source code"
inputs:
  program-id:
    description: "Program ID to verify"
    required: true
  program:
    description: "Program name"
    required: true
  rpc-url:
    description: "Solana RPC URL"
    required: true
  keypair:
    description: "The keypair with authority to write verify data"
    required: true
  skip-build:
    description: "Skip building the program"
    required: false
    default: "true"
  skip-prompt:
    description: "Skip interactive questions"
    required: false
    default: "true"
  repo-url:
    description: "GitHub repository URL"
    required: true
  commit-hash:
    description: "Git commit hash to verify against"
    required: false
  mount-path:
    description: "Path to the program directory"
    required: false
  network:
    description: "Target network (mainnet/devnet)"
    required: true
  verify-version:
    description: "Version of solana-verify to use"
    required: true

runs:
  using: "composite"
  steps:
    - uses: ./.github/actions/setup/
    - uses: ./.github/actions/setup-solana/
    - uses: ./.github/actions/setup-solana-verify/
      with:
        verify-version: ${{ inputs.verify-version }}

    - name: Write keypair
      shell: bash
      run: |
        echo "$DEPLOY_KEYPAIR" > ./deploy-keypair.json
        chmod 600 ./deploy-keypair.json
      env:
        DEPLOY_KEYPAIR: ${{ inputs.keypair }}

    - name: Debug Environment
      shell: bash
      run: |
        echo "Network: ${{ github.event.inputs.network }}"
        echo "Verify: ${{ github.event.inputs.verify }}"
        echo "Has keypair: ${{ inputs.keypair != '' }}"
        echo "RPC URL: ${{ inputs.rpc-url }}"

    - name: Verify Build
      shell: bash
      run: |
        ARGS=""

        if [ "${{ inputs.skip-build }}" = "true" ]; then
          ARGS="$ARGS --skip-build"
        fi

        if [ "${{ inputs.skip-prompt }}" = "true" ]; then
          ARGS="$ARGS --skip-prompt"
        fi

        if [ -n "${{ inputs.mount-path }}" ]; then
          ARGS="$ARGS --mount-path ${{ inputs.mount-path }}"
        fi

        if [ -n "${{ inputs.commit-hash }}" ]; then
          ARGS="$ARGS --commit-hash ${{ inputs.commit-hash }}"
        fi

        if [ "${{ inputs.network }}" = "mainnet" ]; then
          ARGS="$ARGS --remote"
        fi

        solana-verify verify-from-repo \
          --program-id ${{ inputs.program-id }} \
          --url ${{ inputs.rpc-url }} \
          --library-name ${{ inputs.program }} \
          -k ./deploy-keypair.json \
          $ARGS \
          ${{ inputs.repo-url }}

    - name: Export PDA Transaction
      shell: bash
      run: |
        echo "=== Exporting PDA Transaction ==="
        solana-verify export-pda-tx \
          ${{ inputs.repo-url }} \
          --program-id ${{ inputs.program-id }} \
          --uploader ${{ inputs.keypair }} \
          --commit-hash ${{ inputs.commit-hash }} \
          --url ${{ inputs.rpc-url }} \
          --encoding base64 

    - name: Cleanup keypair
      shell: bash
      if: always()
      run: rm -f ./deploy-keypair.json
