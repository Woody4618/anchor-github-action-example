name: Build Program

on:
  workflow_dispatch:  # Allow manual triggering
    inputs:
      program:
        description: 'Program to build'
        required: true
        default: 'transaction_example'
      solana_version:
        description: 'Override Solana version (leave empty to use version from Cargo.lock)'
        required: false
      anchor_version:
        description: 'Override Anchor version (leave empty to use version from Cargo.lock)'
        required: false
      network:
        description: 'Target network for deployment (requires DEVNET_SOLANA_DEPLOY_URL or MAINNET_SOLANA_DEPLOY_URL secret)'
        required: false
        default: 'devnet'
        type: choice
        options:
          - devnet
          - mainnet
      deploy:
        description: 'Deploy program (requires DEVNET_DEPLOYER_KEYPAIR/MAINNET_DEPLOYER_KEYPAIR and DEVNET_DEPLOYER_ADDRESS/MAINNET_DEPLOYER_ADDRESS secrets)'
        required: false
        type: boolean
        default: false
      upload_idl:
        description: 'Upload IDL (requires IDL_AUTHORITY secret)'
        required: false
        type: boolean
        default: false
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Required secrets for this workflow:
#   - DEVNET_SOLANA_DEPLOY_URL: The RPC URL for devnet deployments
#   - MAINNET_SOLANA_DEPLOY_URL: The RPC URL for mainnet deployments
#   - DEVNET_DEPLOYER_KEYPAIR: The base58 encoded keypair for devnet deployments
#   - MAINNET_DEPLOYER_KEYPAIR: The base58 encoded keypair for mainnet deployments
#   - DEVNET_DEPLOYER_ADDRESS: The public key address for devnet buffer authority
#   - MAINNET_DEPLOYER_ADDRESS: The public key address for mainnet buffer authority
#   - IDL_AUTHORITY: The keypair with authority to upload IDL
#   - PROGRAM_ADDRESS_KEYPAIR: The keypair for initial program deployment (if program doesn't exist)

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Extract Versions
        id: versions
        run: |
          # Extract Solana version from Cargo.lock or use override
          if [ -n "${{ github.event.inputs.solana_version }}" ]; then
            SOLANA_VERSION="${{ github.event.inputs.solana_version }}"
            echo "Using override Solana version: ${SOLANA_VERSION}"
          else
            SOLANA_VERSION=$(grep -A 2 'name = "solana-program"' Cargo.lock | grep 'version' | head -n 1 | cut -d'"' -f2)
            echo "Detected Solana version: ${SOLANA_VERSION}"
          fi
          echo "SOLANA_VERSION=${SOLANA_VERSION}" >> $GITHUB_ENV
          echo "SOLANA_CLI_VERSION=${SOLANA_VERSION}" >> $GITHUB_ENV

          # Extract Anchor version from Cargo.lock or use override
          if [ -n "${{ github.event.inputs.anchor_version }}" ]; then
            ANCHOR_VERSION="${{ github.event.inputs.anchor_version }}"
            echo "Using override Anchor version: ${ANCHOR_VERSION}"
          else
            ANCHOR_VERSION=$(grep -A 2 'name = "anchor-lang"' Cargo.lock | grep 'version' | head -n 1 | cut -d'"' -f2)
            echo "Detected Anchor version: ${ANCHOR_VERSION}"
          fi
          echo "ANCHOR_VERSION=${ANCHOR_VERSION}" >> $GITHUB_ENV
          
          # Debug environment variables
          echo "=== Environment Variables Debug ==="
          echo "Content of GITHUB_ENV file:"
          cat $GITHUB_ENV
          echo "=== Direct Environment Variables ==="
          echo "SOLANA_VERSION: $SOLANA_VERSION"
          echo "ANCHOR_VERSION: $ANCHOR_VERSION"
          echo "==========================="

      - name: Debug Environment Before Anchor Setup
        run: |
          echo "=== Environment Variables Before Anchor Setup ==="
          env | grep -E "SOLANA|ANCHOR"
          echo "==========================="

      - name: Install Solana
        uses: ./.github/actions/setup-solana

      - name: Install Anchor
        uses: ./.github/actions/setup-anchor
        with:
          anchor-version: ${{ env.ANCHOR_VERSION }}

      - name: Set Program Variables
        run: |
          PROGRAM="${{ github.event.inputs.program || 'transaction-example' }}"
          PROGRAM_NAME=${PROGRAM//-/_}
          echo "Looking for program ${PROGRAM_NAME} in Anchor.toml"
          cat ./Anchor.toml
          echo "Running toml command:"
          ~/.cargo/bin/toml get ./Anchor.toml programs.localnet.${PROGRAM_NAME} || true
          PROGRAM_ID=$(~/.cargo/bin/toml get ./Anchor.toml programs.localnet.${PROGRAM_NAME} | tr -d '"')
          echo "Program: $PROGRAM_ID"
          echo "PROGRAM_NAME=${PROGRAM_NAME}" >> $GITHUB_ENV
          echo "PROGRAM_ID=${PROGRAM_ID}" >> $GITHUB_ENV

      - name: Debug Initial Structure
        run: |
          echo "Current directory structure:"
          pwd
          ls -la
          echo "Programs directory:"
          ls -la programs/ || true
          echo "Anchor.toml contents:"
          cat Anchor.toml

      - uses: ./.github/actions/build-anchor/
        with:
          testing: false
          devnet: ${{ github.event.inputs.network == 'devnet' }}
          program: ${{ env.PROGRAM_NAME }}

      - name: Create local artifacts directory
        run: |
          # Create directories
          mkdir -p build-artifacts/so
          mkdir -p build-artifacts/idl
          
          # Check if source files exist
          echo "Checking source files:"
          ls -la ./target/deploy/
          ls -la ./target/idl/
          
          # Copy with verbose flag
          cp -v ./target/deploy/${{ env.PROGRAM_NAME }}.so build-artifacts/so/
          cp -v ./target/idl/${{ env.PROGRAM_NAME }}.json build-artifacts/idl/
          
          # Check copied files
          echo "Checking copied files:"
          ls -la build-artifacts/so/
          ls -la build-artifacts/idl/
          
          # Set permissions
          chmod -R 777 build-artifacts/
          
          echo "Artifacts copied to project directory at:"
          echo "SO file: ./build-artifacts/so/${{ env.PROGRAM_NAME }}.so"
          echo "IDL file: ./build-artifacts/idl/${{ env.PROGRAM_NAME }}.json"

      - name: Store so files
        if: ${{ !env.ACT }}  # Only run on GitHub Actions, skip for local act runs
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROGRAM_NAME }}-so
          path: |
            ./target/deploy/${{ env.PROGRAM_NAME }}.so

      - name: Store idl files
        if: ${{ !env.ACT }}  # Only run on GitHub Actions, skip for local act runs
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROGRAM_NAME }}-idl
          path: |
            ./target/idl/${{ env.PROGRAM_NAME }}.json

      - name: Print Artifact Locations
        run: |
          echo "Artifacts stored locally at:"
          echo "SO file: ./artifacts/build/${{ env.PROGRAM_NAME }}-so/target/deploy/${{ env.PROGRAM_NAME }}.so"
          echo "IDL file: ./artifacts/build/${{ env.PROGRAM_NAME }}-idl/target/idl/${{ env.PROGRAM_NAME }}.json"

      - uses: ./.github/actions/build-verified/
        if: ${{ !env.ACT }}  # Skip on local runs
        id: build-verified
        with:
          devnet: ${{ github.event.inputs.network == 'devnet' }}
          program: ${{ env.PROGRAM_NAME }}
          program-id: ${{ env.PROGRAM_ID }}

      - uses: ./.github/actions/buffer-deploy/
        id: buffer-deploy
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true'
        with:
          devnet: ${{ github.event.inputs.network == 'devnet' }}
          rpc-url: ${{ github.event.inputs.network == 'mainnet' && secrets.MAINNET_SOLANA_DEPLOY_URL || secrets.DEVNET_SOLANA_DEPLOY_URL }}
          program: ${{ env.PROGRAM_NAME }}
          program-id: ${{ env.PROGRAM_ID }}
          keypair: ${{ github.event.inputs.network == 'mainnet' && secrets.MAINNET_DEPLOYER_KEYPAIR || secrets.DEVNET_DEPLOYER_KEYPAIR }}
          buffer-authority: ${{ github.event.inputs.network == 'mainnet' && secrets.MAINNET_DEPLOYER_ADDRESS || secrets.DEVNET_DEPLOYER_ADDRESS }}

      - uses: ./.github/actions/program-upgrade/
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true'
        with:
          program-id: ${{ env.PROGRAM_ID }}
          program: ${{ env.PROGRAM_NAME }}
          buffer: ${{ steps.buffer-deploy.outputs.buffer }}
          rpc-url: ${{ github.event.inputs.network == 'mainnet' && secrets.MAINNET_SOLANA_DEPLOY_URL || secrets.DEVNET_SOLANA_DEPLOY_URL }}
          keypair: ${{ github.event.inputs.network == 'mainnet' && secrets.MAINNET_DEPLOYER_KEYPAIR || secrets.DEVNET_DEPLOYER_KEYPAIR }}

      - uses: ./.github/actions/idl-upload/
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.upload_idl == 'true'
        with:
          program-id: ${{ env.PROGRAM_ID }}
          rpc-url: ${{ github.event.inputs.network == 'mainnet' && secrets.MAINNET_SOLANA_DEPLOY_URL || secrets.DEVNET_SOLANA_DEPLOY_URL }}
          keypair: ${{ secrets.IDL_AUTHORITY }}
          idl-buffer: ${{ steps.buffer-deploy.outputs.idl-buffer }}

