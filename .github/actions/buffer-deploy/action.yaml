name: "Upload BPF"
description: "Uploads an anchor program as a bpf"
inputs:
  devnet:
    description: "Whether to use devnet feature"
    required: false
    default: "false"
  testing:
    description: "Whether to use devnet feature"
    required: false
    default: "false"
  network:
    description: "The Solana network"
    required: true
    default: "devnet"
  program:
    description: "The program to build and upload"
    required: true
  program-id:
    description: "The program id of the program we are uploading"
    required: true
  keypair:
    description: "The keypair to use for deploys"
    required: true
  buffer-authority:
    description: "The buffer authority to set"
    required: true
outputs:
  buffer:
    description: "The buffer address"
    value: ${{ steps.buffer-deploy-store.outputs.BUFFER }}
  idl-buffer:
    description: "The idl buffer address."
    value: ${{ steps.buffer-deploy-store.outputs.IDL_BUFFER }}

runs:
  using: "composite"
  steps:
    - uses: ./.github/actions/setup/
    - uses: ./.github/actions/setup-anchor/
      with:
        node-version: ${{ env.NODE_VERSION }}
    - run: echo "$DEPLOY_KEYPAIR" > ./deploy-keypair.json && chmod 600 ./deploy-keypair.json
      shell: bash
      env:
        DEPLOY_KEYPAIR: ${{ inputs.keypair }}
    - run: solana-keygen new -s -o keyp --no-bip39-passphrase
      shell: bash
    - run: ls -l ./target/deploy/
      shell: bash
    - name: Buffer Deploy
      if: steps.cache-buffer.outputs.cache-hit != 'true'
      id: buffer-deploy
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 30
        max_attempts: 10
        shell: bash
        command: solana program write-buffer --max-sign-attempts 50 --with-compute-unit-price 100000 --use-rpc --buffer ./keyp -k ./deploy-keypair.json ./target/deploy/$PROGRAM.so -u $NETWORK > ./buffer.out
      env:
        NETWORK: ${{ inputs.network }}
        PROGRAM: ${{ inputs.program }}
    - name: IDL Buffer Deploy
      uses: nick-invision/retry@v2
      id: idl-buffer-deploy
      if: steps.cache-buffer.outputs.cache-hit != 'true'
      with:
        timeout_minutes: 10
        max_attempts: 50
        shell: bash
        command: |
          # Check if IDL exists first
          if anchor idl fetch $PROGRAM_ID --provider.cluster $NETWORK > /dev/null 2>&1; then
            echo "IDL exists, creating buffer..."
            ~/.cargo/bin/anchor idl write-buffer $PROGRAM_ID --filepath ./target/idl/$PROGRAM.json --provider.cluster $NETWORK --provider.wallet ./deploy-keypair.json > idl-buffer.out
            echo "IDL buffer created"
          else
            echo "IDL Account does not exist yet, skipping buffer creation, will call init during upload idl instead"
            echo "No buffer created" > idl-buffer.out
          fi
      env:
        PROGRAM_ID: ${{ inputs.program-id }}
        PROGRAM: ${{ inputs.program }}
        NETWORK: ${{ inputs.network }}
    - name: Buffer Deploy Store
      shell: bash
      id: buffer-deploy-store
      run: |
        echo "=== Content of idl-buffer.out ==="
        cat idl-buffer.out
        echo "=== Raw content as hex ==="
        xxd idl-buffer.out
        echo "=== Attempting to extract buffer ==="
        if grep -q "No buffer created" idl-buffer.out; then
          echo "No IDL buffer was created"
          echo "IDL_BUFFER=" >> $GITHUB_OUTPUT
        else
          IDL_BUFFER=$(cat idl-buffer.out | grep -o 'Idl buffer created: [^ ]*' | cut -d' ' -f4)
          echo "Extracted IDL buffer: '$IDL_BUFFER'"
          echo "IDL_BUFFER=$IDL_BUFFER" >> $GITHUB_OUTPUT
        fi
        echo "BUFFER=$(cat buffer.out | sed 's/Buffer: //g' | xargs echo -n)" >> $GITHUB_OUTPUT
    - run: echo "The buffer is ${{ steps.buffer-deploy-store.outputs.BUFFER }}"
      shell: bash
    - run: echo "the idl buffer is ${{ steps.buffer-deploy-store.outputs.IDL_BUFFER }}"
      shell: bash
    - run: echo "the idl is $(cat ./target/idl/$PROGRAM.json)"
      shell: bash
      env:
        PROGRAM: ${{ inputs.program }}
    - name: Transfer idl buffer to authority
      uses: nick-invision/retry@v2
      if: steps.cache-buffer.outputs.cache-hit != 'true' && steps.buffer-deploy-store.outputs.IDL_BUFFER != ''
      with:
        timeout_minutes: 10
        max_attempts: 50
        shell: bash
        command: |
          if [ -n "$IDL_BUFFER" ]; then
            echo "Setting authority for IDL buffer: $IDL_BUFFER"
            anchor idl set-authority $IDL_BUFFER --provider.cluster $NETWORK --program-id $PROGRAM_ID --new-authority $AUTHORITY --provider.wallet ./deploy-keypair.json
          else
            echo "No IDL buffer to set authority for, skipping"
          fi
            
      env:
        IDL_BUFFER: ${{ steps.buffer-deploy-store.outputs.IDL_BUFFER }}
        AUTHORITY: ${{ inputs.buffer-authority }}
        NETWORK: ${{ inputs.network }}
        PROGRAM_ID: ${{ inputs.program-id }}
    - name: Transfer buffer to authority
      uses: nick-invision/retry@v2
      if: steps.cache-buffer.outputs.cache-hit != 'true'
      with:
        timeout_minutes: 10
        max_attempts: 50
        shell: bash
        command: solana program set-buffer-authority $BUFFER -k ./deploy-keypair.json --new-buffer-authority $AUTHORITY -u $NETWORK
      env:
        BUFFER: ${{ steps.buffer-deploy-store.outputs.BUFFER }}
        AUTHORITY: ${{ inputs.buffer-authority }}
        NETWORK: ${{ inputs.network }}

    - name: Upgrade program with buffer
      uses: nick-invision/retry@v2
      if: steps.cache-buffer.outputs.cache-hit != 'true'
      with:
        timeout_minutes: 10
        max_attempts: 50
        shell: bash
        command: |
          # Get current and new program sizes
          CURRENT_SIZE=$(solana program show $PROGRAM_ID -u $NETWORK | grep "Data Length:" | cut -d ":" -f2 | cut -d " " -f2)
          NEW_SIZE=$(wc -c < ./target/deploy/$PROGRAM.so)
          echo "Current program size: $CURRENT_SIZE bytes"
          echo "New program size: $NEW_SIZE bytes"
          
          # Extend program if needed
          if [ $NEW_SIZE -gt $CURRENT_SIZE ]; then
            echo "Program needs to be extended"
            solana program extend $PROGRAM_ID $((NEW_SIZE - CURRENT_SIZE)) -u $NETWORK -k ./deploy-keypair.json 
            echo "Program extended successfully"
          fi
          
          # Upgrade program
          solana program upgrade $BUFFER $PROGRAM_ID -k ./deploy-keypair.json -u $NETWORK 
      env:
        BUFFER: ${{ steps.buffer-deploy-store.outputs.BUFFER }}
        AUTHORITY: ${{ inputs.buffer-authority }}
        NETWORK: ${{ inputs.network }}
        PROGRAM_ID: ${{ inputs.program-id }}
        PROGRAM: ${{ inputs.program }}

    - run: rm ./deploy-keypair.json
      shell: bash
      if: always()
